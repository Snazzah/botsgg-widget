// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Fragment, h } from 'preact';
import { render } from 'preact-render-to-string';

import { RequestContext } from '.';
import { BotsGGBot, fetchAvatar, fetchBot } from './util';
import arrayBufferToBase64 from './util/base64ArrayBuffer';
import { FontType, renderText, RenderTextResult } from './util/fontRender';

export const WIDGET_TYPES = ['default', 'banner'] as const;
export type ReadonlyArrayToUnion<T extends Readonly<[string, ...string[]]>> = T[number];
export type WidgetType = ReadonlyArrayToUnion<typeof WIDGET_TYPES>;

export const BOTSGG_PATH = 'M9.26145 3.77524C8.03955 2.86252 6.87583 2.90245 6.87583 2.90245L6.76174 3.03822C8.21639 3.46492 8.87583 4.10496 8.87583 4.10496C7.98079 3.63948 7.10857 3.38734 6.31393 3.30975C5.74032 3.23794 5.15961 3.24447 4.58775 3.32915C4.54169 3.3273 4.49568 3.33387 4.45198 3.34855C4.14166 3.36794 3.42517 3.48431 2.51245 3.87222C2.18273 4.02738 2.00817 4.12436 2.00817 4.12436C2.00817 4.12436 2.7064 3.44552 4.23806 3.01883L4.14109 2.92185C4.04422 2.92128 3.94742 2.927 3.8513 2.93896V1.21962H5.20612L3.57463 0V0.960068H2.21924L3.57463 1.97889V2.98117C2.91484 3.11115 2.29319 3.3893 1.7566 3.79464C1.7566 3.79464 0.534698 6.00513 0.534698 8.72048C0.534698 8.72048 1.25233 9.94181 3.1331 10C3.1331 10 3.46282 9.61209 3.69557 9.30177C2.61171 8.97262 2.22209 8.31318 2.22209 8.31318C2.29592 8.36425 2.37376 8.40927 2.45484 8.4478L2.47423 8.4672C2.50333 8.48137 2.52961 8.50069 2.55181 8.52424C2.75687 8.63173 2.9699 8.72327 3.18901 8.79806C3.58796 8.96603 4.00426 9.08943 4.43031 9.166C5.15957 9.3094 5.90913 9.31597 6.6408 9.1854C7.06038 9.10271 7.47094 8.97948 7.8667 8.81746C8.21491 8.6884 8.54687 8.51916 8.85586 8.31318C8.85586 8.31318 8.42916 8.99201 7.32363 9.30177C7.57577 9.63149 7.8861 10 7.8861 10C9.76858 9.94296 10.4651 8.72048 10.4651 8.72048C10.4828 5.98574 9.26145 3.77524 9.26145 3.77524ZM3.85187 0.537365L4.40235 0.960068H3.85187V0.537365ZM3.02415 1.22191H3.57463V1.64233L3.02415 1.22191ZM3.93059 7.90588C3.4651 7.90588 3.07492 7.47918 3.07492 6.9749C3.07492 6.45123 3.46282 6.04392 3.93059 6.04392C4.41547 6.04392 4.80338 6.45123 4.80338 6.9749C4.8011 7.47804 4.41319 7.90588 3.93059 7.90588ZM4.68872 5.90245L3.07149 5.14946L3.18901 4.89561L4.80452 5.64917L4.68872 5.90245ZM7.03327 7.90588C6.56836 7.90588 6.18045 7.47918 6.18045 6.9749C6.18045 6.45123 6.56836 6.04392 7.03327 6.04392C7.51816 6.04392 7.90606 6.45123 7.90606 6.9749C7.90378 7.47804 7.51587 7.90588 7.03099 7.90588H7.03327ZM6.29226 5.90245L6.17417 5.64917L7.78912 4.89561L7.90777 5.14946L6.29226 5.90245Z';

interface TextBoxOptions {
  x: number;
  y: number;
  fill: string;
  opacity?: number;
  font?: FontType;
  size?: number;
  width?: number;
  height?: number;
  wrap?: boolean;
  maxLines?: number;
  background?: {
    padding: number | { t: number; b: number; l: number; r: number };
    fill: string;
    rx?: number;
  };
}

interface TextBoxResult {
  element: h.JSX.Element;
  textData: RenderTextResult;
}

async function createTextBox(text: string, opts: TextBoxOptions, ctx: RequestContext): Promise<TextBoxResult> {
  const textData = await renderText(text, ctx, {
    font: opts.font,
    size: opts.size,
    width: opts.width,
    wrap: opts.wrap
  });

  const bgPadding =
    typeof opts.background?.padding === 'number'
      ? { t: opts.background.padding, b: opts.background.padding, l: opts.background.padding, r: opts.background.padding }
      : opts.background?.padding || { t: 0, b: 0, l: 0, r: 0 };

  const element = (
    <g>
      {opts.background && (
        <rect
          x={opts.x - bgPadding.l}
          y={opts.y - bgPadding.t}
          width={textData.metrics.width + bgPadding.l + bgPadding.r}
          height={textData.metrics.height + bgPadding.t + bgPadding.b}
          fill={opts.background.fill}
          rx={opts.background.rx}
        />
      )}
      {textData.d && <path d={textData.d} fill={opts.fill} opacity={opts.opacity} transform={`translate(${opts.x} ${opts.y})`} />}
      {textData.paths
        ?.slice(0, opts.maxLines)
        .map((path, i) => (
          <path
            d={path.d}
            fill={opts.fill}
            opacity={opts.opacity}
            transform={`translate(${opts.x} ${opts.y + textData.paths.slice(0, i).reduce((p, path) => p + path.metrics.height, 0)})`}
          />
        ))}
    </g>
  );

  return { element, textData };
}

interface MultiPartTextBoxOptions {
  x: number;
  y: number;
  font?: FontType;
  size?: number;
  parts: { text: string; fill: string; opacity?: number }[];
  background?: {
    padding: number | { t: number; b: number; l: number; r: number };
    fill: string;
    rx?: number;
  };
}

interface MultiPartTextBoxResult {
  element: h.JSX.Element;
  textsData: RenderTextResult[];
  metrics: {
    width: number;
    height: number;
  };
}

async function createMultiPartTextBox(opts: MultiPartTextBoxOptions, ctx: RequestContext): Promise<MultiPartTextBoxResult> {
  const bgPadding =
    typeof opts.background?.padding === 'number'
      ? { t: opts.background.padding, b: opts.background.padding, l: opts.background.padding, r: opts.background.padding }
      : opts.background?.padding || { t: 0, b: 0, l: 0, r: 0 };

  const textsData = await Promise.all(
    opts.parts.map((part) =>
      renderText(part.text, ctx, {
        font: opts.font,
        size: opts.size
      })
    )
  );

  const metrics = {
    width: textsData.reduce((p, textData) => p + textData.metrics.width, 0),
    height: textsData.reduce((p, textData) => (p < textData.metrics.height ? textData.metrics.height : p), 0)
  };

  const element = (
    <g>
      {opts.background && (
        <rect
          x={opts.x - bgPadding.l}
          y={opts.y - bgPadding.t}
          width={metrics.width + bgPadding.l + bgPadding.r}
          height={metrics.height + bgPadding.t + bgPadding.b}
          fill={opts.background.fill}
          rx={opts.background.rx}
        />
      )}
      {textsData.map((path, i) => (
        <path
          d={path.d}
          fill={opts.parts[i].fill}
          opacity={opts.parts[i].opacity}
          transform={`translate(${opts.x + textsData.slice(0, i).reduce((p, textData) => p + textData.metrics.width, 0)} ${opts.y})`}
        />
      ))}
    </g>
  );

  return { element, textsData, metrics };
}

export async function getDefaultWidget(bot: BotsGGBot, ctx: RequestContext) {
  const botAvatar = await fetchAvatar(bot.clientId, bot.avatarURL, ctx);
  const footerId = `botsgg-${bot.clientId}-footer`;
  const avatarId = `botsgg-${bot.clientId}-avatar`;

  const nameText = await createTextBox(
    bot.globalName || bot.username,
    {
      x: 60,
      y: 6,
      size: 11,
      fill: 'white',
      background: {
        fill: '#424A62',
        padding: {
          t: 16,
          b: 6,
          l: 8,
          r: 8
        },
        rx: 8
      }
    },
    ctx
  );

  let headerX = 76 + nameText.textData.metrics.width;

  let serversText: TextBoxResult = null;
  if (bot.guildCount) {
    serversText = await createTextBox(
      `${new Intl.NumberFormat('en', { notation: 'compact' }).format(bot.guildCount)} server${bot.guildCount !== 1 ? 's' : ''}`,
      {
        x: headerX + 18,
        y: 6,
        size: 11,
        fill: '#00B050'
      },
      ctx
    );
    headerX += serversText.textData.metrics.width + 30;
  }

  const libraryText = await createTextBox(
    bot.libraryName,
    {
      x: headerX + 18,
      y: 6,
      size: 11,
      fill: '#424A62'
    },
    ctx
  );

  const ownerText = await createMultiPartTextBox(
    {
      x: 58,
      y: 38,
      size: 9,
      parts: [
        {
          text: bot.owner.discriminator === '0' ? bot.owner.globalName : bot.owner.username,
          fill: 'white'
        },
        ...(bot.owner.discriminator !== '0'
          ? [
              {
                text: `#${bot.owner.discriminator}`,
                fill: 'white',
                opacity: 0.5
              }
            ]
          : []),
        ...(bot.coOwners.length
          ? [
              {
                text: ` + ${bot.coOwners.length.toLocaleString()}`,
                fill: 'white',
                opacity: 0.75
              }
            ]
          : [])
      ],
      background: {
        fill: 'black',
        padding: {
          t: 2,
          b: 2,
          l: 6,
          r: 6
        },
        rx: 9
      }
    },
    ctx
  );

  const prefixText =
    ownerText.metrics.width < 200
      ? await createMultiPartTextBox(
          {
            x: 58 + ownerText.metrics.width + 10 + 12,
            y: 38,
            size: 9,
            parts: [
              {
                text: 'Prefix: ',
                fill: 'white'
              },
              {
                text: bot.prefix ?? '/',
                fill: 'white',
                opacity: 0.75
              }
            ],
            background: {
              fill: 'black',
              padding: {
                t: 2,
                b: 2,
                l: 6,
                r: 6
              },
              rx: 9
            }
          },
          ctx
        )
      : null;

  const descriptionText = await createTextBox(
    bot.shortDescription,
    {
      x: 52,
      y: 60,
      size: 11,
      width: 230,
      wrap: true,
      maxLines: 4,
      fill: 'white'
    },
    ctx
  );

  return (
    <svg width={300} height={150} xmlns="http://www.w3.org/2000/svg" {...{ 'xmlns:xlink': 'http://www.w3.org/1999/xlink' }} viewBox="0 0 300 150">
      <title>{bot.username}</title>

      <defs>
        <clipPath id={footerId}>
          <rect x={0} y={0} width={300} height={150} rx={8} />
        </clipPath>
        <clipPath id={avatarId}>
          <circle cx={26} cy={26} r={16} />
        </clipPath>
      </defs>

      {/* background */}
      <rect x={0} y={0} width={300} height={150} fill="#161921" rx={8} />

      {/* footer */}
      <a href="https://discord.bots.gg" target="_blank">
        <title>See more bots!</title>
        <rect x={0} y={130} width={300} height={20} fill="black" clip-path={`url(#${footerId})`} />
        <path
          d={BOTSGG_PATH}
          fill="white"
          transform="translate(114.53 135)"
        />
        <path
          d="M4.06686 5.92578H4.03171C3.73223 6.36068 3.28431 6.57812 2.68796 6.57812C2.12806 6.57812 1.69186 6.38672 1.37936 6.00391C1.06947 5.62109 0.91452 5.07682 0.91452 4.37109C0.91452 3.66536 1.07077 3.11719 1.38327 2.72656C1.69577 2.33594 2.13067 2.14062 2.68796 2.14062C3.26869 2.14062 3.714 2.35156 4.0239 2.77344H4.07468L4.04733 2.46484L4.03171 2.16406V0.421875H4.68015V6.5H4.1528L4.06686 5.92578ZM2.76999 6.03516C3.2127 6.03516 3.53301 5.91536 3.73093 5.67578C3.93145 5.43359 4.03171 5.04427 4.03171 4.50781V4.37109C4.03171 3.76432 3.93015 3.33203 3.72702 3.07422C3.5265 2.8138 3.20488 2.68359 2.76218 2.68359C2.38197 2.68359 2.0903 2.83203 1.88718 3.12891C1.68666 3.42318 1.5864 3.83984 1.5864 4.37891C1.5864 4.92578 1.68666 5.33854 1.88718 5.61719C2.0877 5.89583 2.38197 6.03516 2.76999 6.03516ZM6.70749 6.5H6.05905V2.21875H6.70749V6.5ZM6.00436 1.05859C6.00436 0.910156 6.04082 0.802083 6.11374 0.734375C6.18666 0.664062 6.2778 0.628906 6.38718 0.628906C6.49134 0.628906 6.58119 0.664062 6.65671 0.734375C6.73223 0.804688 6.76999 0.91276 6.76999 1.05859C6.76999 1.20443 6.73223 1.3138 6.65671 1.38672C6.58119 1.45703 6.49134 1.49219 6.38718 1.49219C6.2778 1.49219 6.18666 1.45703 6.11374 1.38672C6.04082 1.3138 6.00436 1.20443 6.00436 1.05859ZM10.8442 5.33203C10.8442 5.73047 10.6958 6.03776 10.3989 6.25391C10.102 6.47005 9.68535 6.57812 9.1489 6.57812C8.58119 6.57812 8.13848 6.48828 7.82077 6.30859V5.70703C8.0265 5.8112 8.24655 5.89323 8.48093 5.95312C8.71791 6.01302 8.94577 6.04297 9.16452 6.04297C9.50306 6.04297 9.76348 5.98958 9.94577 5.88281C10.1281 5.77344 10.2192 5.60807 10.2192 5.38672C10.2192 5.22005 10.1463 5.07812 10.0005 4.96094C9.85723 4.84115 9.57598 4.70052 9.15671 4.53906C8.75827 4.39062 8.47442 4.26172 8.30515 4.15234C8.13848 4.04036 8.01348 3.91406 7.93015 3.77344C7.84942 3.63281 7.80905 3.46484 7.80905 3.26953C7.80905 2.92057 7.95098 2.64583 8.23483 2.44531C8.51869 2.24219 8.90801 2.14062 9.4028 2.14062C9.86374 2.14062 10.3143 2.23438 10.7544 2.42188L10.5239 2.94922C10.0942 2.77214 9.70488 2.68359 9.35593 2.68359C9.04863 2.68359 8.81686 2.73177 8.66061 2.82812C8.50436 2.92448 8.42624 3.05729 8.42624 3.22656C8.42624 3.34115 8.45488 3.4388 8.51218 3.51953C8.57207 3.60026 8.66712 3.67708 8.79733 3.75C8.92754 3.82292 9.17754 3.92839 9.54733 4.06641C10.0551 4.2513 10.3976 4.4375 10.5747 4.625C10.7544 4.8125 10.8442 5.04818 10.8442 5.33203ZM13.6137 6.57812C12.9939 6.57812 12.5135 6.38802 12.1723 6.00781C11.8338 5.625 11.6645 5.08464 11.6645 4.38672C11.6645 3.67057 11.8364 3.11719 12.1801 2.72656C12.5265 2.33594 13.0187 2.14062 13.6567 2.14062C13.8624 2.14062 14.0682 2.16276 14.2739 2.20703C14.4796 2.2513 14.6411 2.30339 14.7583 2.36328L14.5591 2.91406C14.4158 2.85677 14.2596 2.8099 14.0903 2.77344C13.921 2.73438 13.7713 2.71484 13.6411 2.71484C12.7713 2.71484 12.3364 3.26953 12.3364 4.37891C12.3364 4.90495 12.4419 5.30859 12.6528 5.58984C12.8663 5.87109 13.1814 6.01172 13.5981 6.01172C13.9549 6.01172 14.3208 5.9349 14.6958 5.78125V6.35547C14.4093 6.50391 14.0486 6.57812 13.6137 6.57812ZM19.4106 4.35547C19.4106 5.05339 19.2348 5.59896 18.8833 5.99219C18.5317 6.38281 18.046 6.57812 17.4262 6.57812C17.0434 6.57812 16.7036 6.48828 16.4067 6.30859C16.1098 6.12891 15.8807 5.87109 15.7192 5.53516C15.5577 5.19922 15.477 4.80599 15.477 4.35547C15.477 3.65755 15.6515 3.11458 16.0005 2.72656C16.3494 2.33594 16.8338 2.14062 17.4536 2.14062C18.0525 2.14062 18.5278 2.33984 18.8794 2.73828C19.2335 3.13672 19.4106 3.67578 19.4106 4.35547ZM16.1489 4.35547C16.1489 4.90234 16.2583 5.31901 16.477 5.60547C16.6958 5.89193 17.0174 6.03516 17.4419 6.03516C17.8663 6.03516 18.188 5.89323 18.4067 5.60938C18.6281 5.32292 18.7387 4.90495 18.7387 4.35547C18.7387 3.8112 18.6281 3.39844 18.4067 3.11719C18.188 2.83333 17.8637 2.69141 17.4341 2.69141C17.0096 2.69141 16.6893 2.83073 16.4731 3.10938C16.257 3.38802 16.1489 3.80339 16.1489 4.35547ZM22.5044 2.14062C22.6945 2.14062 22.865 2.15625 23.0161 2.1875L22.9262 2.78906C22.7492 2.75 22.5929 2.73047 22.4575 2.73047C22.1111 2.73047 21.8143 2.87109 21.5669 3.15234C21.3221 3.43359 21.1997 3.78385 21.1997 4.20312V6.5H20.5512V2.21875H21.0864L21.1606 3.01172H21.1919C21.3507 2.73307 21.5421 2.51823 21.7661 2.36719C21.99 2.21615 22.2361 2.14062 22.5044 2.14062ZM26.7309 5.92578H26.6958C26.3963 6.36068 25.9484 6.57812 25.352 6.57812C24.7921 6.57812 24.3559 6.38672 24.0434 6.00391C23.7335 5.62109 23.5786 5.07682 23.5786 4.37109C23.5786 3.66536 23.7348 3.11719 24.0473 2.72656C24.3598 2.33594 24.7947 2.14062 25.352 2.14062C25.9327 2.14062 26.3781 2.35156 26.688 2.77344H26.7387L26.7114 2.46484L26.6958 2.16406V0.421875H27.3442V6.5H26.8169L26.7309 5.92578ZM25.4341 6.03516C25.8768 6.03516 26.1971 5.91536 26.395 5.67578C26.5955 5.43359 26.6958 5.04427 26.6958 4.50781V4.37109C26.6958 3.76432 26.5942 3.33203 26.3911 3.07422C26.1906 2.8138 25.8689 2.68359 25.4262 2.68359C25.046 2.68359 24.7544 2.83203 24.5512 3.12891C24.3507 3.42318 24.2505 3.83984 24.2505 4.37891C24.2505 4.92578 24.3507 5.33854 24.5512 5.61719C24.7518 5.89583 25.046 6.03516 25.4341 6.03516ZM28.6294 6.08594C28.6294 5.91146 28.6684 5.77995 28.7466 5.69141C28.8273 5.60026 28.9419 5.55469 29.0903 5.55469C29.2413 5.55469 29.3585 5.60026 29.4419 5.69141C29.5278 5.77995 29.5708 5.91146 29.5708 6.08594C29.5708 6.25521 29.5278 6.38542 29.4419 6.47656C29.3559 6.56771 29.2387 6.61328 29.0903 6.61328C28.9575 6.61328 28.8468 6.57292 28.7583 6.49219C28.6723 6.40885 28.6294 6.27344 28.6294 6.08594ZM32.8481 2.14844C33.4106 2.14844 33.8468 2.34115 34.1567 2.72656C34.4692 3.10938 34.6255 3.65234 34.6255 4.35547C34.6255 5.05859 34.4679 5.60547 34.1528 5.99609C33.8403 6.38411 33.4054 6.57812 32.8481 6.57812C32.5695 6.57812 32.3143 6.52734 32.0825 6.42578C31.8533 6.32161 31.6606 6.16276 31.5044 5.94922H31.4575L31.3208 6.5H30.8559V0.421875H31.5044V1.89844C31.5044 2.22917 31.4939 2.52604 31.4731 2.78906H31.5044C31.8064 2.36198 32.2544 2.14844 32.8481 2.14844ZM32.7544 2.69141C32.3117 2.69141 31.9926 2.81901 31.7973 3.07422C31.602 3.32682 31.5044 3.75391 31.5044 4.35547C31.5044 4.95703 31.6046 5.38802 31.8051 5.64844C32.0057 5.90625 32.3273 6.03516 32.77 6.03516C33.1684 6.03516 33.4653 5.89062 33.6606 5.60156C33.8559 5.3099 33.9536 4.89193 33.9536 4.34766C33.9536 3.79036 33.8559 3.375 33.6606 3.10156C33.4653 2.82812 33.1632 2.69141 32.7544 2.69141ZM39.4575 4.35547C39.4575 5.05339 39.2817 5.59896 38.9301 5.99219C38.5786 6.38281 38.0929 6.57812 37.4731 6.57812C37.0903 6.57812 36.7505 6.48828 36.4536 6.30859C36.1567 6.12891 35.9275 5.87109 35.7661 5.53516C35.6046 5.19922 35.5239 4.80599 35.5239 4.35547C35.5239 3.65755 35.6984 3.11458 36.0473 2.72656C36.3963 2.33594 36.8807 2.14062 37.5005 2.14062C38.0994 2.14062 38.5747 2.33984 38.9262 2.73828C39.2804 3.13672 39.4575 3.67578 39.4575 4.35547ZM36.1958 4.35547C36.1958 4.90234 36.3051 5.31901 36.5239 5.60547C36.7426 5.89193 37.0643 6.03516 37.4887 6.03516C37.9132 6.03516 38.2348 5.89323 38.4536 5.60938C38.6749 5.32292 38.7856 4.90495 38.7856 4.35547C38.7856 3.8112 38.6749 3.39844 38.4536 3.11719C38.2348 2.83333 37.9106 2.69141 37.4809 2.69141C37.0564 2.69141 36.7361 2.83073 36.52 3.10938C36.3038 3.38802 36.1958 3.80339 36.1958 4.35547ZM41.9809 6.04297C42.0955 6.04297 42.2062 6.03516 42.313 6.01953C42.4197 6.0013 42.5044 5.98307 42.5669 5.96484V6.46094C42.4966 6.49479 42.3924 6.52214 42.2544 6.54297C42.1189 6.56641 41.9966 6.57812 41.8872 6.57812C41.0591 6.57812 40.645 6.14193 40.645 5.26953V2.72266H40.0317V2.41016L40.645 2.14062L40.9184 1.22656H41.2934V2.21875H42.5356V2.72266H41.2934V5.24219C41.2934 5.5 41.3546 5.69792 41.477 5.83594C41.5994 5.97396 41.7674 6.04297 41.9809 6.04297ZM46.188 5.33203C46.188 5.73047 46.0395 6.03776 45.7426 6.25391C45.4458 6.47005 45.0291 6.57812 44.4926 6.57812C43.9249 6.57812 43.4822 6.48828 43.1645 6.30859V5.70703C43.3702 5.8112 43.5903 5.89323 43.8247 5.95312C44.0617 6.01302 44.2895 6.04297 44.5083 6.04297C44.8468 6.04297 45.1072 5.98958 45.2895 5.88281C45.4718 5.77344 45.563 5.60807 45.563 5.38672C45.563 5.22005 45.49 5.07812 45.3442 4.96094C45.201 4.84115 44.9197 4.70052 44.5005 4.53906C44.102 4.39062 43.8182 4.26172 43.6489 4.15234C43.4822 4.04036 43.3572 3.91406 43.2739 3.77344C43.1932 3.63281 43.1528 3.46484 43.1528 3.26953C43.1528 2.92057 43.2947 2.64583 43.5786 2.44531C43.8624 2.24219 44.2518 2.14062 44.7466 2.14062C45.2075 2.14062 45.658 2.23438 46.0981 2.42188L45.8676 2.94922C45.438 2.77214 45.0486 2.68359 44.6997 2.68359C44.3924 2.68359 44.1606 2.73177 44.0044 2.82812C43.8481 2.92448 43.77 3.05729 43.77 3.22656C43.77 3.34115 43.7986 3.4388 43.8559 3.51953C43.9158 3.60026 44.0109 3.67708 44.1411 3.75C44.2713 3.82292 44.5213 3.92839 44.8911 4.06641C45.3989 4.2513 45.7413 4.4375 45.9184 4.625C46.0981 4.8125 46.188 5.04818 46.188 5.33203ZM47.1528 6.08594C47.1528 5.91146 47.1919 5.77995 47.27 5.69141C47.3507 5.60026 47.4653 5.55469 47.6137 5.55469C47.7648 5.55469 47.882 5.60026 47.9653 5.69141C48.0512 5.77995 48.0942 5.91146 48.0942 6.08594C48.0942 6.25521 48.0512 6.38542 47.9653 6.47656C47.8794 6.56771 47.7622 6.61328 47.6137 6.61328C47.4809 6.61328 47.3702 6.57292 47.2817 6.49219C47.1958 6.40885 47.1528 6.27344 47.1528 6.08594ZM52.8833 2.21875V2.62891L52.0903 2.72266C52.1632 2.8138 52.2283 2.93359 52.2856 3.08203C52.3429 3.22786 52.3716 3.39323 52.3716 3.57812C52.3716 3.9974 52.2283 4.33203 51.9419 4.58203C51.6554 4.83203 51.2622 4.95703 50.7622 4.95703C50.6346 4.95703 50.5148 4.94661 50.4028 4.92578C50.1268 5.07161 49.9887 5.25521 49.9887 5.47656C49.9887 5.59375 50.0369 5.68099 50.1333 5.73828C50.2296 5.79297 50.395 5.82031 50.6294 5.82031H51.3872C51.8507 5.82031 52.2062 5.91797 52.4536 6.11328C52.7036 6.30859 52.8286 6.59245 52.8286 6.96484C52.8286 7.4388 52.6385 7.79948 52.2583 8.04688C51.8781 8.29688 51.3234 8.42188 50.5942 8.42188C50.0343 8.42188 49.602 8.31771 49.2973 8.10938C48.9952 7.90104 48.8442 7.60677 48.8442 7.22656C48.8442 6.96615 48.9275 6.74089 49.0942 6.55078C49.2609 6.36068 49.4952 6.23177 49.7973 6.16406C49.688 6.11458 49.5955 6.03776 49.52 5.93359C49.4471 5.82943 49.4106 5.70833 49.4106 5.57031C49.4106 5.41406 49.4523 5.27734 49.5356 5.16016C49.6189 5.04297 49.7505 4.92969 49.9301 4.82031C49.7088 4.72917 49.5278 4.57422 49.3872 4.35547C49.2492 4.13672 49.1801 3.88672 49.1801 3.60547C49.1801 3.13672 49.3208 2.77604 49.602 2.52344C49.8833 2.26823 50.2817 2.14062 50.7973 2.14062C51.0213 2.14062 51.2231 2.16667 51.4028 2.21875H52.8833ZM49.4692 7.21875C49.4692 7.45052 49.5669 7.6263 49.7622 7.74609C49.9575 7.86589 50.2374 7.92578 50.602 7.92578C51.1463 7.92578 51.5486 7.84375 51.8091 7.67969C52.0721 7.51823 52.2036 7.29818 52.2036 7.01953C52.2036 6.78776 52.132 6.6263 51.9887 6.53516C51.8455 6.44661 51.576 6.40234 51.1801 6.40234H50.4028C50.1085 6.40234 49.8794 6.47266 49.7153 6.61328C49.5512 6.75391 49.4692 6.95573 49.4692 7.21875ZM49.8208 3.58984C49.8208 3.88932 49.9054 4.11589 50.0747 4.26953C50.2439 4.42318 50.4796 4.5 50.7817 4.5C51.4145 4.5 51.7309 4.19271 51.7309 3.57812C51.7309 2.9349 51.4106 2.61328 50.77 2.61328C50.4653 2.61328 50.2309 2.69531 50.0669 2.85938C49.9028 3.02344 49.8208 3.26693 49.8208 3.58984ZM57.2661 2.21875V2.62891L56.4731 2.72266C56.546 2.8138 56.6111 2.93359 56.6684 3.08203C56.7257 3.22786 56.7544 3.39323 56.7544 3.57812C56.7544 3.9974 56.6111 4.33203 56.3247 4.58203C56.0382 4.83203 55.645 4.95703 55.145 4.95703C55.0174 4.95703 54.8976 4.94661 54.7856 4.92578C54.5096 5.07161 54.3716 5.25521 54.3716 5.47656C54.3716 5.59375 54.4197 5.68099 54.5161 5.73828C54.6124 5.79297 54.7778 5.82031 55.0122 5.82031H55.77C56.2335 5.82031 56.589 5.91797 56.8364 6.11328C57.0864 6.30859 57.2114 6.59245 57.2114 6.96484C57.2114 7.4388 57.0213 7.79948 56.6411 8.04688C56.2609 8.29688 55.7062 8.42188 54.977 8.42188C54.4171 8.42188 53.9848 8.31771 53.6801 8.10938C53.3781 7.90104 53.227 7.60677 53.227 7.22656C53.227 6.96615 53.3104 6.74089 53.477 6.55078C53.6437 6.36068 53.8781 6.23177 54.1801 6.16406C54.0708 6.11458 53.9783 6.03776 53.9028 5.93359C53.8299 5.82943 53.7934 5.70833 53.7934 5.57031C53.7934 5.41406 53.8351 5.27734 53.9184 5.16016C54.0018 5.04297 54.1333 4.92969 54.313 4.82031C54.0916 4.72917 53.9106 4.57422 53.77 4.35547C53.632 4.13672 53.563 3.88672 53.563 3.60547C53.563 3.13672 53.7036 2.77604 53.9848 2.52344C54.2661 2.26823 54.6645 2.14062 55.1801 2.14062C55.4041 2.14062 55.6059 2.16667 55.7856 2.21875H57.2661ZM53.852 7.21875C53.852 7.45052 53.9497 7.6263 54.145 7.74609C54.3403 7.86589 54.6202 7.92578 54.9848 7.92578C55.5291 7.92578 55.9314 7.84375 56.1919 7.67969C56.4549 7.51823 56.5864 7.29818 56.5864 7.01953C56.5864 6.78776 56.5148 6.6263 56.3716 6.53516C56.2283 6.44661 55.9588 6.40234 55.563 6.40234H54.7856C54.4913 6.40234 54.2622 6.47266 54.0981 6.61328C53.9341 6.75391 53.852 6.95573 53.852 7.21875ZM54.2036 3.58984C54.2036 3.88932 54.2882 4.11589 54.4575 4.26953C54.6268 4.42318 54.8624 4.5 55.1645 4.5C55.7973 4.5 56.1137 4.19271 56.1137 3.57812C56.1137 2.9349 55.7934 2.61328 55.1528 2.61328C54.8481 2.61328 54.6137 2.69531 54.4497 2.85938C54.2856 3.02344 54.2036 3.26693 54.2036 3.58984Z "
          fill="white"
          transform="translate(128.45 136.5)"
        />
      </a>

      {/* avatar */}
      <a href={`https://discord.bots.gg/bots/${bot.clientId}`} target="_blank">
        {/* background */}
        <circle cx={26} cy={26} r={16} fill="black" opacity={0.5} />

        <image
          x={10}
          y={10}
          width={32}
          height={32}
          xlinkHref={`data:image/png;base64,${arrayBufferToBase64(botAvatar)}`}
          clip-path={`url(#${avatarId})`}
        />

        {/* status */}
        <circle cx={38} cy={38} r={5} fill={bot.online || bot.status == 'online' ? '#43B581' : '#747F8D'} stroke-width={2} stroke="#161921" />
      </a>

      <g>
        <a href={`https://discord.bots.gg/bots/${bot.clientId}`} target="_blank">
          {nameText.element}
        </a>

        {serversText && (
          <>
            <path
              xmlns="http://www.w3.org/2000/svg"
              d="M10.1792 8.855L12.8333 4.26417V11.0833V12.25H1.16666V1.75H2.33333V9.065L5.54166 3.5L9.33333 5.705L11.8067 1.42917L12.8158 2.0125L9.765 7.29167L5.9675 5.10417L2.51416 11.0833H3.8325L6.39333 6.67334L10.1792 8.855Z"
              fill="#00B050"
              transform={`translate(${76 + nameText.textData.metrics.width} 6)`}
            />
            {serversText.element}
          </>
        )}

        {libraryText && libraryText.textData.metrics.width + headerX + 34 < 295 && (
          <>
            <path
              xmlns="http://www.w3.org/2000/svg"
              d="M6.41667 3.79167V5.4425L4.85917 7L6.41667 8.5575V10.2083L3.20833 7L6.41667 3.79167ZM7.58333 3.75083L10.8325 7L7.58333 10.2492V8.59833L9.18167 7L7.58333 5.40167V3.75083ZM2.91667 1.75C2.26917 1.75 1.75 2.275 1.75 2.91667V11.0833C1.75 11.3928 1.87292 11.6895 2.09171 11.9083C2.3105 12.1271 2.60725 12.25 2.91667 12.25H11.0833C11.3928 12.25 11.6895 12.1271 11.9083 11.9083C12.1271 11.6895 12.25 11.3928 12.25 11.0833V2.91667C12.25 2.60725 12.1271 2.3105 11.9083 2.09171C11.6895 1.87292 11.3928 1.75 11.0833 1.75H2.91667Z"
              fill="#424A62"
              transform={`translate(${76 + nameText.textData.metrics.width + (serversText ? serversText.textData.metrics.width + 26 : 0)} 6)`}
            />
            {libraryText.element}
          </>
        )}
      </g>

      <g>
        <a href={`https://discord.bots.gg/profile/${bot.owner.userId}`} target="_blank">
          {ownerText.element}
        </a>

        {prefixText?.element}
      </g>

      {descriptionText.element}
    </svg>
  );
}

export async function getBannerWidget(bot: BotsGGBot, ctx: RequestContext) {
  const botAvatar = await fetchAvatar(bot.clientId, bot.avatarURL, ctx);
  const avatarId = `botsgg-${bot.clientId}-avatar`;

  const nameText = await createTextBox(
    bot.globalName || bot.username,
    {
      x: 50,
      y: 10,
      size: 13,
      fill: 'white',
      background: {
        fill: '#424A62',
        padding: {
          t: 16,
          b: 16,
          l: 8,
          r: 8
        }
      }
    },
    ctx
  );

  let headerX = 66 + nameText.textData.metrics.width;

  let serversText: TextBoxResult = null;
  if (bot.guildCount) {
    serversText = await createTextBox(
      `${new Intl.NumberFormat('en', { notation: 'compact' }).format(bot.guildCount)} server${bot.guildCount !== 1 ? 's' : ''}`,
      {
        x: headerX + 18,
        y: 12,
        size: 11,
        fill: '#00B050'
      },
      ctx
    );
    headerX += serversText.textData.metrics.width + 10;
  }

  const libraryText = await createTextBox(
    bot.libraryName,
    {
      x: headerX + 34,
      y: 12,
      size: 11,
      fill: '#424A62'
    },
    ctx
  );

  return (
    <svg width={300} height={40} xmlns="http://www.w3.org/2000/svg" {...{ 'xmlns:xlink': 'http://www.w3.org/1999/xlink' }} viewBox="0 0 300 40">
      <title>{bot.username}</title>

      <defs>
        <clipPath id={avatarId}>
          <circle cx={20} cy={20} r={12} />
        </clipPath>
      </defs>

      {/* background */}
      <rect x={0} y={0} width={300} height={40} fill="#161921" rx={8} />

      {/* avatar */}
      <a href={`https://discord.bots.gg/bots/${bot.clientId}`} target="_blank">
        {/* background */}
        <circle cx={20} cy={20} r={12} fill="black" opacity={0.5} />

        <image
          x={8}
          y={8}
          width={24}
          height={24}
          xlinkHref={`data:image/png;base64,${arrayBufferToBase64(botAvatar)}`}
          clip-path={`url(#${avatarId})`}
        />

        {/* status */}
        <circle cx={29} cy={29} r={4} fill={bot.online || bot.status == 'online' ? '#43B581' : '#747F8D'} stroke-width={2} stroke="#161921" />
      </a>

      <g>
        <a href={`https://discord.bots.gg/bots/${bot.clientId}`} target="_blank">
          {nameText.element}
        </a>

        {serversText && (
          <>
            <path
              xmlns="http://www.w3.org/2000/svg"
              d="M10.1792 8.855L12.8333 4.26417V11.0833V12.25H1.16666V1.75H2.33333V9.065L5.54166 3.5L9.33333 5.705L11.8067 1.42917L12.8158 2.0125L9.765 7.29167L5.9675 5.10417L2.51416 11.0833H3.8325L6.39333 6.67334L10.1792 8.855Z"
              fill="#00B050"
              transform={`translate(${66 + nameText.textData.metrics.width} 12)`}
            />
            {serversText.element}
          </>
        )}

        {libraryText && libraryText.textData.metrics.width + headerX + 34 < 295 && (
          <>
            <path
              xmlns="http://www.w3.org/2000/svg"
              d="M6.41667 3.79167V5.4425L4.85917 7L6.41667 8.5575V10.2083L3.20833 7L6.41667 3.79167ZM7.58333 3.75083L10.8325 7L7.58333 10.2492V8.59833L9.18167 7L7.58333 5.40167V3.75083ZM2.91667 1.75C2.26917 1.75 1.75 2.275 1.75 2.91667V11.0833C1.75 11.3928 1.87292 11.6895 2.09171 11.9083C2.3105 12.1271 2.60725 12.25 2.91667 12.25H11.0833C11.3928 12.25 11.6895 12.1271 11.9083 11.9083C12.1271 11.6895 12.25 11.3928 12.25 11.0833V2.91667C12.25 2.60725 12.1271 2.3105 11.9083 2.09171C11.6895 1.87292 11.3928 1.75 11.0833 1.75H2.91667Z"
              fill="#424A62"
              transform={`translate(${66 + nameText.textData.metrics.width + (serversText ? serversText.textData.metrics.width + 26 : 0)} 12)`}
            />
            {libraryText.element}
          </>
        )}
      </g>
    </svg>
  );
}

export async function renderWidget(id: string, type: WidgetType, ctx: RequestContext) {
  const bot = await fetchBot(id, ctx);
  let vdom: h.JSX.Element;

  if (!bot) {
    vdom = get404Widget(type);
  } else {
    switch (type) {
      case 'default':
        vdom = await getDefaultWidget(bot, ctx);
        break;
      case 'banner':
        vdom = await getBannerWidget(bot, ctx);
        break;
    }
  }

  return render(vdom);
}

export async function fetchOrRenderWidget(id: string, type: WidgetType, ctx: RequestContext) {
  const cached = await ctx.env.SVG_CACHE.get(`bot/${id}/${type}`, { cacheTtl: 60 * 60 * 3 });
  if (cached) return cached;

  const svg = await renderWidget(id, type, ctx);
  await ctx.env.SVG_CACHE.put(`bot/${id}/${type}`, svg, { expirationTtl: 60 * 60 * 3 });
  return svg;
}

export async function handleWidget(id: string, type: WidgetType, ctx: RequestContext, width?: number) {
  let svg = await fetchOrRenderWidget(id, type, ctx);

  // Reside width if given
  if (width) {
    const svgRegex = /^<svg width="(?<width>\d+)" height="(?<height>\d+)"/;
    const match = svgRegex.exec(svg);
    if (match) {
      const newHeight = width * (parseInt(match.groups.height) / parseInt(match.groups.width));
      svg = `<svg width="${width}" height="${newHeight}"` + svg.slice(match[0].length);
    }
  }

  return '<?xml version="1.0" encoding="UTF-8"?>' + svg;
}

export function get404Widget(type: WidgetType) {
  let vdom: h.JSX.Element;
  switch (type) {
    case 'default':
      vdom = (
        <svg
          width={300}
          height={150}
          xmlns="http://www.w3.org/2000/svg"
          {...{ 'xmlns:xlink': 'http://www.w3.org/1999/xlink' }}
          viewBox="0 -150 300 150"
        >
          <defs>
            <clipPath id="d0">
              <rect x="0" y="-150" width="300" height="150" rx="8" />
            </clipPath>
          </defs>
          <rect x="0" y="-150" width="300" height="150" fill="#161921" rx="8" />
          <a href="https://discord.bots.gg" target="_blank">
            <title>See more bots!</title>
            <rect x="0" y="-20" width="300" height="20" fill="black" clip-path="url(#d0)" />
            <path
              d={BOTSGG_PATH}
              fill="white"
              transform="translate(114.53 -15)"
            />
            <path
              d="M4.06686 5.92578H4.03171C3.73223 6.36068 3.28431 6.57812 2.68796 6.57812C2.12806 6.57812 1.69186 6.38672 1.37936 6.00391C1.06947 5.62109 0.91452 5.07682 0.91452 4.37109C0.91452 3.66536 1.07077 3.11719 1.38327 2.72656C1.69577 2.33594 2.13067 2.14062 2.68796 2.14062C3.26869 2.14062 3.714 2.35156 4.0239 2.77344H4.07468L4.04733 2.46484L4.03171 2.16406V0.421875H4.68015V6.5H4.1528L4.06686 5.92578ZM2.76999 6.03516C3.2127 6.03516 3.53301 5.91536 3.73093 5.67578C3.93145 5.43359 4.03171 5.04427 4.03171 4.50781V4.37109C4.03171 3.76432 3.93015 3.33203 3.72702 3.07422C3.5265 2.8138 3.20488 2.68359 2.76218 2.68359C2.38197 2.68359 2.0903 2.83203 1.88718 3.12891C1.68666 3.42318 1.5864 3.83984 1.5864 4.37891C1.5864 4.92578 1.68666 5.33854 1.88718 5.61719C2.0877 5.89583 2.38197 6.03516 2.76999 6.03516ZM6.70749 6.5H6.05905V2.21875H6.70749V6.5ZM6.00436 1.05859C6.00436 0.910156 6.04082 0.802083 6.11374 0.734375C6.18666 0.664062 6.2778 0.628906 6.38718 0.628906C6.49134 0.628906 6.58119 0.664062 6.65671 0.734375C6.73223 0.804688 6.76999 0.91276 6.76999 1.05859C6.76999 1.20443 6.73223 1.3138 6.65671 1.38672C6.58119 1.45703 6.49134 1.49219 6.38718 1.49219C6.2778 1.49219 6.18666 1.45703 6.11374 1.38672C6.04082 1.3138 6.00436 1.20443 6.00436 1.05859ZM10.8442 5.33203C10.8442 5.73047 10.6958 6.03776 10.3989 6.25391C10.102 6.47005 9.68535 6.57812 9.1489 6.57812C8.58119 6.57812 8.13848 6.48828 7.82077 6.30859V5.70703C8.0265 5.8112 8.24655 5.89323 8.48093 5.95312C8.71791 6.01302 8.94577 6.04297 9.16452 6.04297C9.50306 6.04297 9.76348 5.98958 9.94577 5.88281C10.1281 5.77344 10.2192 5.60807 10.2192 5.38672C10.2192 5.22005 10.1463 5.07812 10.0005 4.96094C9.85723 4.84115 9.57598 4.70052 9.15671 4.53906C8.75827 4.39062 8.47442 4.26172 8.30515 4.15234C8.13848 4.04036 8.01348 3.91406 7.93015 3.77344C7.84942 3.63281 7.80905 3.46484 7.80905 3.26953C7.80905 2.92057 7.95098 2.64583 8.23483 2.44531C8.51869 2.24219 8.90801 2.14062 9.4028 2.14062C9.86374 2.14062 10.3143 2.23438 10.7544 2.42188L10.5239 2.94922C10.0942 2.77214 9.70488 2.68359 9.35593 2.68359C9.04863 2.68359 8.81686 2.73177 8.66061 2.82812C8.50436 2.92448 8.42624 3.05729 8.42624 3.22656C8.42624 3.34115 8.45488 3.4388 8.51218 3.51953C8.57207 3.60026 8.66712 3.67708 8.79733 3.75C8.92754 3.82292 9.17754 3.92839 9.54733 4.06641C10.0551 4.2513 10.3976 4.4375 10.5747 4.625C10.7544 4.8125 10.8442 5.04818 10.8442 5.33203ZM13.6137 6.57812C12.9939 6.57812 12.5135 6.38802 12.1723 6.00781C11.8338 5.625 11.6645 5.08464 11.6645 4.38672C11.6645 3.67057 11.8364 3.11719 12.1801 2.72656C12.5265 2.33594 13.0187 2.14062 13.6567 2.14062C13.8624 2.14062 14.0682 2.16276 14.2739 2.20703C14.4796 2.2513 14.6411 2.30339 14.7583 2.36328L14.5591 2.91406C14.4158 2.85677 14.2596 2.8099 14.0903 2.77344C13.921 2.73438 13.7713 2.71484 13.6411 2.71484C12.7713 2.71484 12.3364 3.26953 12.3364 4.37891C12.3364 4.90495 12.4419 5.30859 12.6528 5.58984C12.8663 5.87109 13.1814 6.01172 13.5981 6.01172C13.9549 6.01172 14.3208 5.9349 14.6958 5.78125V6.35547C14.4093 6.50391 14.0486 6.57812 13.6137 6.57812ZM19.4106 4.35547C19.4106 5.05339 19.2348 5.59896 18.8833 5.99219C18.5317 6.38281 18.046 6.57812 17.4262 6.57812C17.0434 6.57812 16.7036 6.48828 16.4067 6.30859C16.1098 6.12891 15.8807 5.87109 15.7192 5.53516C15.5577 5.19922 15.477 4.80599 15.477 4.35547C15.477 3.65755 15.6515 3.11458 16.0005 2.72656C16.3494 2.33594 16.8338 2.14062 17.4536 2.14062C18.0525 2.14062 18.5278 2.33984 18.8794 2.73828C19.2335 3.13672 19.4106 3.67578 19.4106 4.35547ZM16.1489 4.35547C16.1489 4.90234 16.2583 5.31901 16.477 5.60547C16.6958 5.89193 17.0174 6.03516 17.4419 6.03516C17.8663 6.03516 18.188 5.89323 18.4067 5.60938C18.6281 5.32292 18.7387 4.90495 18.7387 4.35547C18.7387 3.8112 18.6281 3.39844 18.4067 3.11719C18.188 2.83333 17.8637 2.69141 17.4341 2.69141C17.0096 2.69141 16.6893 2.83073 16.4731 3.10938C16.257 3.38802 16.1489 3.80339 16.1489 4.35547ZM22.5044 2.14062C22.6945 2.14062 22.865 2.15625 23.0161 2.1875L22.9262 2.78906C22.7492 2.75 22.5929 2.73047 22.4575 2.73047C22.1111 2.73047 21.8143 2.87109 21.5669 3.15234C21.3221 3.43359 21.1997 3.78385 21.1997 4.20312V6.5H20.5512V2.21875H21.0864L21.1606 3.01172H21.1919C21.3507 2.73307 21.5421 2.51823 21.7661 2.36719C21.99 2.21615 22.2361 2.14062 22.5044 2.14062ZM26.7309 5.92578H26.6958C26.3963 6.36068 25.9484 6.57812 25.352 6.57812C24.7921 6.57812 24.3559 6.38672 24.0434 6.00391C23.7335 5.62109 23.5786 5.07682 23.5786 4.37109C23.5786 3.66536 23.7348 3.11719 24.0473 2.72656C24.3598 2.33594 24.7947 2.14062 25.352 2.14062C25.9327 2.14062 26.3781 2.35156 26.688 2.77344H26.7387L26.7114 2.46484L26.6958 2.16406V0.421875H27.3442V6.5H26.8169L26.7309 5.92578ZM25.4341 6.03516C25.8768 6.03516 26.1971 5.91536 26.395 5.67578C26.5955 5.43359 26.6958 5.04427 26.6958 4.50781V4.37109C26.6958 3.76432 26.5942 3.33203 26.3911 3.07422C26.1906 2.8138 25.8689 2.68359 25.4262 2.68359C25.046 2.68359 24.7544 2.83203 24.5512 3.12891C24.3507 3.42318 24.2505 3.83984 24.2505 4.37891C24.2505 4.92578 24.3507 5.33854 24.5512 5.61719C24.7518 5.89583 25.046 6.03516 25.4341 6.03516ZM28.6294 6.08594C28.6294 5.91146 28.6684 5.77995 28.7466 5.69141C28.8273 5.60026 28.9419 5.55469 29.0903 5.55469C29.2413 5.55469 29.3585 5.60026 29.4419 5.69141C29.5278 5.77995 29.5708 5.91146 29.5708 6.08594C29.5708 6.25521 29.5278 6.38542 29.4419 6.47656C29.3559 6.56771 29.2387 6.61328 29.0903 6.61328C28.9575 6.61328 28.8468 6.57292 28.7583 6.49219C28.6723 6.40885 28.6294 6.27344 28.6294 6.08594ZM32.8481 2.14844C33.4106 2.14844 33.8468 2.34115 34.1567 2.72656C34.4692 3.10938 34.6255 3.65234 34.6255 4.35547C34.6255 5.05859 34.4679 5.60547 34.1528 5.99609C33.8403 6.38411 33.4054 6.57812 32.8481 6.57812C32.5695 6.57812 32.3143 6.52734 32.0825 6.42578C31.8533 6.32161 31.6606 6.16276 31.5044 5.94922H31.4575L31.3208 6.5H30.8559V0.421875H31.5044V1.89844C31.5044 2.22917 31.4939 2.52604 31.4731 2.78906H31.5044C31.8064 2.36198 32.2544 2.14844 32.8481 2.14844ZM32.7544 2.69141C32.3117 2.69141 31.9926 2.81901 31.7973 3.07422C31.602 3.32682 31.5044 3.75391 31.5044 4.35547C31.5044 4.95703 31.6046 5.38802 31.8051 5.64844C32.0057 5.90625 32.3273 6.03516 32.77 6.03516C33.1684 6.03516 33.4653 5.89062 33.6606 5.60156C33.8559 5.3099 33.9536 4.89193 33.9536 4.34766C33.9536 3.79036 33.8559 3.375 33.6606 3.10156C33.4653 2.82812 33.1632 2.69141 32.7544 2.69141ZM39.4575 4.35547C39.4575 5.05339 39.2817 5.59896 38.9301 5.99219C38.5786 6.38281 38.0929 6.57812 37.4731 6.57812C37.0903 6.57812 36.7505 6.48828 36.4536 6.30859C36.1567 6.12891 35.9275 5.87109 35.7661 5.53516C35.6046 5.19922 35.5239 4.80599 35.5239 4.35547C35.5239 3.65755 35.6984 3.11458 36.0473 2.72656C36.3963 2.33594 36.8807 2.14062 37.5005 2.14062C38.0994 2.14062 38.5747 2.33984 38.9262 2.73828C39.2804 3.13672 39.4575 3.67578 39.4575 4.35547ZM36.1958 4.35547C36.1958 4.90234 36.3051 5.31901 36.5239 5.60547C36.7426 5.89193 37.0643 6.03516 37.4887 6.03516C37.9132 6.03516 38.2348 5.89323 38.4536 5.60938C38.6749 5.32292 38.7856 4.90495 38.7856 4.35547C38.7856 3.8112 38.6749 3.39844 38.4536 3.11719C38.2348 2.83333 37.9106 2.69141 37.4809 2.69141C37.0564 2.69141 36.7361 2.83073 36.52 3.10938C36.3038 3.38802 36.1958 3.80339 36.1958 4.35547ZM41.9809 6.04297C42.0955 6.04297 42.2062 6.03516 42.313 6.01953C42.4197 6.0013 42.5044 5.98307 42.5669 5.96484V6.46094C42.4966 6.49479 42.3924 6.52214 42.2544 6.54297C42.1189 6.56641 41.9966 6.57812 41.8872 6.57812C41.0591 6.57812 40.645 6.14193 40.645 5.26953V2.72266H40.0317V2.41016L40.645 2.14062L40.9184 1.22656H41.2934V2.21875H42.5356V2.72266H41.2934V5.24219C41.2934 5.5 41.3546 5.69792 41.477 5.83594C41.5994 5.97396 41.7674 6.04297 41.9809 6.04297ZM46.188 5.33203C46.188 5.73047 46.0395 6.03776 45.7426 6.25391C45.4458 6.47005 45.0291 6.57812 44.4926 6.57812C43.9249 6.57812 43.4822 6.48828 43.1645 6.30859V5.70703C43.3702 5.8112 43.5903 5.89323 43.8247 5.95312C44.0617 6.01302 44.2895 6.04297 44.5083 6.04297C44.8468 6.04297 45.1072 5.98958 45.2895 5.88281C45.4718 5.77344 45.563 5.60807 45.563 5.38672C45.563 5.22005 45.49 5.07812 45.3442 4.96094C45.201 4.84115 44.9197 4.70052 44.5005 4.53906C44.102 4.39062 43.8182 4.26172 43.6489 4.15234C43.4822 4.04036 43.3572 3.91406 43.2739 3.77344C43.1932 3.63281 43.1528 3.46484 43.1528 3.26953C43.1528 2.92057 43.2947 2.64583 43.5786 2.44531C43.8624 2.24219 44.2518 2.14062 44.7466 2.14062C45.2075 2.14062 45.658 2.23438 46.0981 2.42188L45.8676 2.94922C45.438 2.77214 45.0486 2.68359 44.6997 2.68359C44.3924 2.68359 44.1606 2.73177 44.0044 2.82812C43.8481 2.92448 43.77 3.05729 43.77 3.22656C43.77 3.34115 43.7986 3.4388 43.8559 3.51953C43.9158 3.60026 44.0109 3.67708 44.1411 3.75C44.2713 3.82292 44.5213 3.92839 44.8911 4.06641C45.3989 4.2513 45.7413 4.4375 45.9184 4.625C46.0981 4.8125 46.188 5.04818 46.188 5.33203ZM47.1528 6.08594C47.1528 5.91146 47.1919 5.77995 47.27 5.69141C47.3507 5.60026 47.4653 5.55469 47.6137 5.55469C47.7648 5.55469 47.882 5.60026 47.9653 5.69141C48.0512 5.77995 48.0942 5.91146 48.0942 6.08594C48.0942 6.25521 48.0512 6.38542 47.9653 6.47656C47.8794 6.56771 47.7622 6.61328 47.6137 6.61328C47.4809 6.61328 47.3702 6.57292 47.2817 6.49219C47.1958 6.40885 47.1528 6.27344 47.1528 6.08594ZM52.8833 2.21875V2.62891L52.0903 2.72266C52.1632 2.8138 52.2283 2.93359 52.2856 3.08203C52.3429 3.22786 52.3716 3.39323 52.3716 3.57812C52.3716 3.9974 52.2283 4.33203 51.9419 4.58203C51.6554 4.83203 51.2622 4.95703 50.7622 4.95703C50.6346 4.95703 50.5148 4.94661 50.4028 4.92578C50.1268 5.07161 49.9887 5.25521 49.9887 5.47656C49.9887 5.59375 50.0369 5.68099 50.1333 5.73828C50.2296 5.79297 50.395 5.82031 50.6294 5.82031H51.3872C51.8507 5.82031 52.2062 5.91797 52.4536 6.11328C52.7036 6.30859 52.8286 6.59245 52.8286 6.96484C52.8286 7.4388 52.6385 7.79948 52.2583 8.04688C51.8781 8.29688 51.3234 8.42188 50.5942 8.42188C50.0343 8.42188 49.602 8.31771 49.2973 8.10938C48.9952 7.90104 48.8442 7.60677 48.8442 7.22656C48.8442 6.96615 48.9275 6.74089 49.0942 6.55078C49.2609 6.36068 49.4952 6.23177 49.7973 6.16406C49.688 6.11458 49.5955 6.03776 49.52 5.93359C49.4471 5.82943 49.4106 5.70833 49.4106 5.57031C49.4106 5.41406 49.4523 5.27734 49.5356 5.16016C49.6189 5.04297 49.7505 4.92969 49.9301 4.82031C49.7088 4.72917 49.5278 4.57422 49.3872 4.35547C49.2492 4.13672 49.1801 3.88672 49.1801 3.60547C49.1801 3.13672 49.3208 2.77604 49.602 2.52344C49.8833 2.26823 50.2817 2.14062 50.7973 2.14062C51.0213 2.14062 51.2231 2.16667 51.4028 2.21875H52.8833ZM49.4692 7.21875C49.4692 7.45052 49.5669 7.6263 49.7622 7.74609C49.9575 7.86589 50.2374 7.92578 50.602 7.92578C51.1463 7.92578 51.5486 7.84375 51.8091 7.67969C52.0721 7.51823 52.2036 7.29818 52.2036 7.01953C52.2036 6.78776 52.132 6.6263 51.9887 6.53516C51.8455 6.44661 51.576 6.40234 51.1801 6.40234H50.4028C50.1085 6.40234 49.8794 6.47266 49.7153 6.61328C49.5512 6.75391 49.4692 6.95573 49.4692 7.21875ZM49.8208 3.58984C49.8208 3.88932 49.9054 4.11589 50.0747 4.26953C50.2439 4.42318 50.4796 4.5 50.7817 4.5C51.4145 4.5 51.7309 4.19271 51.7309 3.57812C51.7309 2.9349 51.4106 2.61328 50.77 2.61328C50.4653 2.61328 50.2309 2.69531 50.0669 2.85938C49.9028 3.02344 49.8208 3.26693 49.8208 3.58984ZM57.2661 2.21875V2.62891L56.4731 2.72266C56.546 2.8138 56.6111 2.93359 56.6684 3.08203C56.7257 3.22786 56.7544 3.39323 56.7544 3.57812C56.7544 3.9974 56.6111 4.33203 56.3247 4.58203C56.0382 4.83203 55.645 4.95703 55.145 4.95703C55.0174 4.95703 54.8976 4.94661 54.7856 4.92578C54.5096 5.07161 54.3716 5.25521 54.3716 5.47656C54.3716 5.59375 54.4197 5.68099 54.5161 5.73828C54.6124 5.79297 54.7778 5.82031 55.0122 5.82031H55.77C56.2335 5.82031 56.589 5.91797 56.8364 6.11328C57.0864 6.30859 57.2114 6.59245 57.2114 6.96484C57.2114 7.4388 57.0213 7.79948 56.6411 8.04688C56.2609 8.29688 55.7062 8.42188 54.977 8.42188C54.4171 8.42188 53.9848 8.31771 53.6801 8.10938C53.3781 7.90104 53.227 7.60677 53.227 7.22656C53.227 6.96615 53.3104 6.74089 53.477 6.55078C53.6437 6.36068 53.8781 6.23177 54.1801 6.16406C54.0708 6.11458 53.9783 6.03776 53.9028 5.93359C53.8299 5.82943 53.7934 5.70833 53.7934 5.57031C53.7934 5.41406 53.8351 5.27734 53.9184 5.16016C54.0018 5.04297 54.1333 4.92969 54.313 4.82031C54.0916 4.72917 53.9106 4.57422 53.77 4.35547C53.632 4.13672 53.563 3.88672 53.563 3.60547C53.563 3.13672 53.7036 2.77604 53.9848 2.52344C54.2661 2.26823 54.6645 2.14062 55.1801 2.14062C55.4041 2.14062 55.6059 2.16667 55.7856 2.21875H57.2661ZM53.852 7.21875C53.852 7.45052 53.9497 7.6263 54.145 7.74609C54.3403 7.86589 54.6202 7.92578 54.9848 7.92578C55.5291 7.92578 55.9314 7.84375 56.1919 7.67969C56.4549 7.51823 56.5864 7.29818 56.5864 7.01953C56.5864 6.78776 56.5148 6.6263 56.3716 6.53516C56.2283 6.44661 55.9588 6.40234 55.563 6.40234H54.7856C54.4913 6.40234 54.2622 6.47266 54.0981 6.61328C53.9341 6.75391 53.852 6.95573 53.852 7.21875ZM54.2036 3.58984C54.2036 3.88932 54.2882 4.11589 54.4575 4.26953C54.6268 4.42318 54.8624 4.5 55.1645 4.5C55.7973 4.5 56.1137 4.19271 56.1137 3.57812C56.1137 2.9349 55.7934 2.61328 55.1528 2.61328C54.8481 2.61328 54.6137 2.69531 54.4497 2.85938C54.2856 3.02344 54.2036 3.26693 54.2036 3.58984Z "
              fill="white"
              transform="translate(128.45 -13.5)"
            />
          </a>
          <path
            d="M23.48 20.708H19.376V26H13.688V20.708H0.116V16.784L11.996 0.799998H18.116L7.1 15.956H13.868V11.24H19.376V15.956H23.48V20.708ZM36.0243 26.432C33.9363 26.432 32.0763 25.916 30.4443 24.884C28.8123 23.852 27.5283 22.364 26.5923 20.42C25.6803 18.452 25.2243 16.112 25.2243 13.4C25.2243 10.688 25.6803 8.36 26.5923 6.416C27.5283 4.448 28.8123 2.948 30.4443 1.916C32.0763 0.883999 33.9363 0.368 36.0243 0.368C38.1123 0.368 39.9723 0.883999 41.6043 1.916C43.2363 2.948 44.5083 4.448 45.4203 6.416C46.3563 8.36 46.8243 10.688 46.8243 13.4C46.8243 16.112 46.3563 18.452 45.4203 20.42C44.5083 22.364 43.2363 23.852 41.6043 24.884C39.9723 25.916 38.1123 26.432 36.0243 26.432ZM36.0243 21.5C37.5603 21.5 38.7603 20.84 39.6243 19.52C40.5123 18.2 40.9563 16.16 40.9563 13.4C40.9563 10.64 40.5123 8.6 39.6243 7.28C38.7603 5.96 37.5603 5.3 36.0243 5.3C34.5123 5.3 33.3123 5.96 32.4243 7.28C31.5603 8.6 31.1283 10.64 31.1283 13.4C31.1283 16.16 31.5603 18.2 32.4243 19.52C33.3123 20.84 34.5123 21.5 36.0243 21.5ZM72.7339 20.708H68.6299V26H62.9419V20.708H49.3699V16.784L61.2499 0.799998H67.3699L56.3539 15.956H63.1219V11.24H68.6299V15.956H72.7339V20.708Z"
            fill="white"
            transform="translate(113 -110)"
          />
          <path
            d="M4.776 3.088C5.096 3.18933 5.34667 3.36 5.528 3.6C5.70933 3.83467 5.8 4.12533 5.8 4.472C5.8 4.96267 5.608 5.34133 5.224 5.608C4.84533 5.86933 4.29067 6 3.56 6H0.664V0.4H3.4C4.08267 0.4 4.60533 0.530666 4.968 0.792C5.336 1.05333 5.52 1.408 5.52 1.856C5.52 2.128 5.45333 2.37067 5.32 2.584C5.192 2.79733 5.01067 2.96533 4.776 3.088ZM1.952 1.376V2.696H3.24C3.56 2.696 3.80267 2.64 3.968 2.528C4.13333 2.416 4.216 2.25067 4.216 2.032C4.216 1.81333 4.13333 1.65067 3.968 1.544C3.80267 1.432 3.56 1.376 3.24 1.376H1.952ZM3.464 5.024C3.80533 5.024 4.06133 4.968 4.232 4.856C4.408 4.744 4.496 4.57067 4.496 4.336C4.496 3.872 4.152 3.64 3.464 3.64H1.952V5.024H3.464ZM8.74119 6.064C8.28785 6.064 7.87985 5.97067 7.51719 5.784C7.15985 5.592 6.87985 5.328 6.67719 4.992C6.47452 4.656 6.37319 4.27467 6.37319 3.848C6.37319 3.42133 6.47452 3.04 6.67719 2.704C6.87985 2.368 7.15985 2.10667 7.51719 1.92C7.87985 1.728 8.28785 1.632 8.74119 1.632C9.19452 1.632 9.59985 1.728 9.95719 1.92C10.3145 2.10667 10.5945 2.368 10.7972 2.704C10.9999 3.04 11.1012 3.42133 11.1012 3.848C11.1012 4.27467 10.9999 4.656 10.7972 4.992C10.5945 5.328 10.3145 5.592 9.95719 5.784C9.59985 5.97067 9.19452 6.064 8.74119 6.064ZM8.74119 5.04C9.06119 5.04 9.32252 4.93333 9.52519 4.72C9.73319 4.50133 9.83719 4.21067 9.83719 3.848C9.83719 3.48533 9.73319 3.19733 9.52519 2.984C9.32252 2.76533 9.06119 2.656 8.74119 2.656C8.42119 2.656 8.15719 2.76533 7.94919 2.984C7.74119 3.19733 7.63719 3.48533 7.63719 3.848C7.63719 4.21067 7.74119 4.50133 7.94919 4.72C8.15719 4.93333 8.42119 5.04 8.74119 5.04ZM14.7114 5.792C14.5887 5.88267 14.4367 5.952 14.2554 6C14.0794 6.04267 13.8927 6.064 13.6954 6.064C13.1834 6.064 12.786 5.93333 12.5034 5.672C12.226 5.41067 12.0874 5.02667 12.0874 4.52V2.752H11.4234V1.792H12.0874V0.744H13.3354V1.792H14.4074V2.752H13.3354V4.504C13.3354 4.68533 13.3807 4.82667 13.4714 4.928C13.5674 5.024 13.7007 5.072 13.8714 5.072C14.0687 5.072 14.2367 5.01867 14.3754 4.912L14.7114 5.792ZM20.2936 1.632C20.8269 1.632 21.2562 1.792 21.5816 2.112C21.9122 2.432 22.0776 2.90667 22.0776 3.536V6H20.8296V3.728C20.8296 3.38667 20.7549 3.13333 20.6056 2.968C20.4562 2.79733 20.2402 2.712 19.9576 2.712C19.6429 2.712 19.3922 2.81067 19.2056 3.008C19.0189 3.2 18.9256 3.488 18.9256 3.872V6H17.6776V1.696H18.8696V2.2C19.0349 2.01867 19.2402 1.88 19.4856 1.784C19.7309 1.68267 20.0002 1.632 20.2936 1.632ZM25.3037 6.064C24.8504 6.064 24.4424 5.97067 24.0797 5.784C23.7224 5.592 23.4424 5.328 23.2397 4.992C23.037 4.656 22.9357 4.27467 22.9357 3.848C22.9357 3.42133 23.037 3.04 23.2397 2.704C23.4424 2.368 23.7224 2.10667 24.0797 1.92C24.4424 1.728 24.8504 1.632 25.3037 1.632C25.757 1.632 26.1624 1.728 26.5197 1.92C26.877 2.10667 27.157 2.368 27.3597 2.704C27.5624 3.04 27.6637 3.42133 27.6637 3.848C27.6637 4.27467 27.5624 4.656 27.3597 4.992C27.157 5.328 26.877 5.592 26.5197 5.784C26.1624 5.97067 25.757 6.064 25.3037 6.064ZM25.3037 5.04C25.6237 5.04 25.885 4.93333 26.0877 4.72C26.2957 4.50133 26.3997 4.21067 26.3997 3.848C26.3997 3.48533 26.2957 3.19733 26.0877 2.984C25.885 2.76533 25.6237 2.656 25.3037 2.656C24.9837 2.656 24.7197 2.76533 24.5117 2.984C24.3037 3.19733 24.1997 3.48533 24.1997 3.848C24.1997 4.21067 24.3037 4.50133 24.5117 4.72C24.7197 4.93333 24.9837 5.04 25.3037 5.04ZM31.2739 5.792C31.1512 5.88267 30.9992 5.952 30.8179 6C30.6419 6.04267 30.4552 6.064 30.2579 6.064C29.7459 6.064 29.3485 5.93333 29.0659 5.672C28.7885 5.41067 28.6499 5.02667 28.6499 4.52V2.752H27.9859V1.792H28.6499V0.744H29.8979V1.792H30.9699V2.752H29.8979V4.504C29.8979 4.68533 29.9432 4.82667 30.0339 4.928C30.1299 5.024 30.2632 5.072 30.4339 5.072C30.6312 5.072 30.7992 5.01867 30.9379 4.912L31.2739 5.792ZM35.6081 1.792H36.7121V2.752H35.6401V6H34.3921V2.752H33.7281V1.792H34.3921V1.6C34.3921 1.10933 34.5361 0.72 34.8241 0.432C35.1174 0.144 35.5281 -4.76837e-07 36.0561 -4.76837e-07C36.2427 -4.76837e-07 36.4187 0.0213329 36.5841 0.0639997C36.7547 0.101333 36.8961 0.157333 37.0081 0.232L36.6801 1.136C36.5361 1.03467 36.3681 0.984 36.1761 0.984C35.7974 0.984 35.6081 1.192 35.6081 1.608V1.792ZM39.3271 6.064C38.8738 6.064 38.4658 5.97067 38.1031 5.784C37.7458 5.592 37.4658 5.328 37.2631 4.992C37.0605 4.656 36.9591 4.27467 36.9591 3.848C36.9591 3.42133 37.0605 3.04 37.2631 2.704C37.4658 2.368 37.7458 2.10667 38.1031 1.92C38.4658 1.728 38.8738 1.632 39.3271 1.632C39.7805 1.632 40.1858 1.728 40.5431 1.92C40.9005 2.10667 41.1805 2.368 41.3831 2.704C41.5858 3.04 41.6871 3.42133 41.6871 3.848C41.6871 4.27467 41.5858 4.656 41.3831 4.992C41.1805 5.328 40.9005 5.592 40.5431 5.784C40.1858 5.97067 39.7805 6.064 39.3271 6.064ZM39.3271 5.04C39.6471 5.04 39.9085 4.93333 40.1111 4.72C40.3191 4.50133 40.4231 4.21067 40.4231 3.848C40.4231 3.48533 40.3191 3.19733 40.1111 2.984C39.9085 2.76533 39.6471 2.656 39.3271 2.656C39.0071 2.656 38.7431 2.76533 38.5351 2.984C38.3271 3.19733 38.2231 3.48533 38.2231 3.848C38.2231 4.21067 38.3271 4.50133 38.5351 4.72C38.7431 4.93333 39.0071 5.04 39.3271 5.04ZM46.8573 1.696V6H45.6733V5.488C45.508 5.67467 45.3106 5.81867 45.0813 5.92C44.852 6.016 44.604 6.064 44.3373 6.064C43.772 6.064 43.324 5.90133 42.9933 5.576C42.6626 5.25067 42.4973 4.768 42.4973 4.128V1.696H43.7453V3.944C43.7453 4.63733 44.036 4.984 44.6173 4.984C44.916 4.984 45.156 4.888 45.3373 4.696C45.5186 4.49867 45.6093 4.208 45.6093 3.824V1.696H46.8573ZM50.6295 1.632C51.1628 1.632 51.5922 1.792 51.9175 2.112C52.2482 2.432 52.4135 2.90667 52.4135 3.536V6H51.1655V3.728C51.1655 3.38667 51.0908 3.13333 50.9415 2.968C50.7922 2.79733 50.5762 2.712 50.2935 2.712C49.9788 2.712 49.7282 2.81067 49.5415 3.008C49.3548 3.2 49.2615 3.488 49.2615 3.872V6H48.0135V1.696H49.2055V2.2C49.3708 2.01867 49.5762 1.88 49.8215 1.784C50.0668 1.68267 50.3362 1.632 50.6295 1.632ZM57.9756 0.0639997V6H56.7836V5.504C56.4743 5.87733 56.0263 6.064 55.4396 6.064C55.0343 6.064 54.6663 5.97333 54.3356 5.792C54.0103 5.61067 53.7543 5.352 53.5676 5.016C53.381 4.68 53.2876 4.29067 53.2876 3.848C53.2876 3.40533 53.381 3.016 53.5676 2.68C53.7543 2.344 54.0103 2.08533 54.3356 1.904C54.6663 1.72267 55.0343 1.632 55.4396 1.632C55.989 1.632 56.4183 1.80533 56.7276 2.152V0.0639997H57.9756ZM55.6556 5.04C55.9703 5.04 56.2316 4.93333 56.4396 4.72C56.6476 4.50133 56.7516 4.21067 56.7516 3.848C56.7516 3.48533 56.6476 3.19733 56.4396 2.984C56.2316 2.76533 55.9703 2.656 55.6556 2.656C55.3356 2.656 55.0716 2.76533 54.8636 2.984C54.6556 3.19733 54.5516 3.48533 54.5516 3.848C54.5516 4.21067 54.6556 4.50133 54.8636 4.72C55.0716 4.93333 55.3356 5.04 55.6556 5.04Z"
            fill="white"
            transform="translate(121 -70)"
          />
        </svg>
      );
      break;
    case 'banner':
      vdom = (
        <svg width={300} height={38} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 300 38" fill="none">
          <rect width="300" height="38" rx="8" fill="#161921" />
          <path
            d="M91.935 16.5404C89.98 15.08 88.1181 15.1439 88.1181 15.1439L87.9355 15.3612C90.2629 16.0439 91.318 17.0679 91.318 17.0679C89.886 16.3232 88.4904 15.9197 87.219 15.7956C86.3012 15.6807 85.3721 15.6911 84.4571 15.8266C84.3834 15.8237 84.3098 15.8342 84.2399 15.8577C83.7434 15.8887 82.597 16.0749 81.1366 16.6956C80.6091 16.9438 80.3298 17.099 80.3298 17.099C80.3298 17.099 81.447 16.0128 83.8976 15.3301L83.7425 15.175C83.5875 15.174 83.4326 15.1832 83.2788 15.2023V12.4514H85.4465L82.8361 10.5V12.0361H80.6675L82.8361 13.6662V15.2699C81.7805 15.4778 80.7858 15.9229 79.9273 16.5714C79.9273 16.5714 77.9722 20.1082 77.9722 24.4528C77.9722 24.4528 79.1204 26.4069 82.1297 26.5C82.1297 26.5 82.6572 25.8793 83.0296 25.3828C81.2955 24.8562 80.6721 23.8011 80.6721 23.8011C80.7902 23.8828 80.9147 23.9548 81.0445 24.0165L81.0755 24.0475C81.1221 24.0702 81.1641 24.1011 81.1996 24.1388C81.5277 24.3108 81.8686 24.4572 82.2191 24.5769C82.8575 24.8457 83.5235 25.0431 84.2052 25.1656C85.372 25.395 86.5713 25.4056 87.742 25.1966C88.4133 25.0643 89.0702 24.8672 89.7034 24.6079C90.2606 24.4014 90.7917 24.1307 91.2861 23.8011C91.2861 23.8011 90.6034 24.8872 88.8345 25.3828C89.238 25.9104 89.7345 26.5 89.7345 26.5C92.7465 26.4087 93.8609 24.4528 93.8609 24.4528C93.8892 20.0772 91.935 16.5404 91.935 16.5404ZM83.2797 11.3598L84.1605 12.0361H83.2797V11.3598ZM81.9554 12.455H82.8361V13.1277L81.9554 12.455ZM83.4057 23.1494C82.6609 23.1494 82.0366 22.4667 82.0366 21.6598C82.0366 20.822 82.6572 20.1703 83.4057 20.1703C84.1815 20.1703 84.8021 20.822 84.8021 21.6598C84.7985 22.4649 84.1778 23.1494 83.4057 23.1494ZM84.6187 19.9439L82.0311 18.7391L82.2191 18.333L84.804 19.5387L84.6187 19.9439ZM88.37 23.1494C87.6261 23.1494 87.0054 22.4667 87.0054 21.6598C87.0054 20.822 87.6261 20.1703 88.37 20.1703C89.1458 20.1703 89.7664 20.822 89.7664 21.6598C89.7628 22.4649 89.1421 23.1494 88.3663 23.1494H88.37ZM87.1843 19.9439L86.9954 19.5387L89.5793 18.333L89.7692 18.7391L87.1843 19.9439Z"
            fill="white"
          />
          <path
            d="M120.181 23.472H117.445V27H113.653V23.472H104.605V20.856L112.525 10.2H116.605L109.261 20.304H113.773V17.16H117.445V20.304H120.181V23.472ZM128.544 27.288C127.152 27.288 125.912 26.944 124.824 26.256C123.736 25.568 122.88 24.576 122.256 23.28C121.648 21.968 121.344 20.408 121.344 18.6C121.344 16.792 121.648 15.24 122.256 13.944C122.88 12.632 123.736 11.632 124.824 10.944C125.912 10.256 127.152 9.912 128.544 9.912C129.936 9.912 131.176 10.256 132.264 10.944C133.352 11.632 134.2 12.632 134.808 13.944C135.432 15.24 135.744 16.792 135.744 18.6C135.744 20.408 135.432 21.968 134.808 23.28C134.2 24.576 133.352 25.568 132.264 26.256C131.176 26.944 129.936 27.288 128.544 27.288ZM128.544 24C129.568 24 130.368 23.56 130.944 22.68C131.536 21.8 131.832 20.44 131.832 18.6C131.832 16.76 131.536 15.4 130.944 14.52C130.368 13.64 129.568 13.2 128.544 13.2C127.536 13.2 126.736 13.64 126.144 14.52C125.568 15.4 125.28 16.76 125.28 18.6C125.28 20.44 125.568 21.8 126.144 22.68C126.736 23.56 127.536 24 128.544 24ZM153.017 23.472H150.281V27H146.489V23.472H137.441V20.856L145.361 10.2H149.441L142.097 20.304H146.609V17.16H150.281V20.304H153.017V23.472Z"
            fill="white"
          />
          <path
            d="M168.637 18.588C168.957 18.6893 169.208 18.86 169.389 19.1C169.571 19.3347 169.661 19.6253 169.661 19.972C169.661 20.4627 169.469 20.8413 169.085 21.108C168.707 21.3693 168.152 21.5 167.421 21.5H164.525V15.9H167.261C167.944 15.9 168.467 16.0307 168.829 16.292C169.197 16.5533 169.381 16.908 169.381 17.356C169.381 17.628 169.315 17.8707 169.181 18.084C169.053 18.2973 168.872 18.4653 168.637 18.588ZM165.813 16.876V18.196H167.101C167.421 18.196 167.664 18.14 167.829 18.028C167.995 17.916 168.077 17.7507 168.077 17.532C168.077 17.3133 167.995 17.1507 167.829 17.044C167.664 16.932 167.421 16.876 167.101 16.876H165.813ZM167.325 20.524C167.667 20.524 167.923 20.468 168.093 20.356C168.269 20.244 168.357 20.0707 168.357 19.836C168.357 19.372 168.013 19.14 167.325 19.14H165.813V20.524H167.325ZM172.602 21.564C172.149 21.564 171.741 21.4707 171.378 21.284C171.021 21.092 170.741 20.828 170.538 20.492C170.336 20.156 170.234 19.7747 170.234 19.348C170.234 18.9213 170.336 18.54 170.538 18.204C170.741 17.868 171.021 17.6067 171.378 17.42C171.741 17.228 172.149 17.132 172.602 17.132C173.056 17.132 173.461 17.228 173.818 17.42C174.176 17.6067 174.456 17.868 174.658 18.204C174.861 18.54 174.962 18.9213 174.962 19.348C174.962 19.7747 174.861 20.156 174.658 20.492C174.456 20.828 174.176 21.092 173.818 21.284C173.461 21.4707 173.056 21.564 172.602 21.564ZM172.602 20.54C172.922 20.54 173.184 20.4333 173.386 20.22C173.594 20.0013 173.698 19.7107 173.698 19.348C173.698 18.9853 173.594 18.6973 173.386 18.484C173.184 18.2653 172.922 18.156 172.602 18.156C172.282 18.156 172.018 18.2653 171.81 18.484C171.602 18.6973 171.498 18.9853 171.498 19.348C171.498 19.7107 171.602 20.0013 171.81 20.22C172.018 20.4333 172.282 20.54 172.602 20.54ZM178.573 21.292C178.45 21.3827 178.298 21.452 178.117 21.5C177.941 21.5427 177.754 21.564 177.557 21.564C177.045 21.564 176.647 21.4333 176.365 21.172C176.087 20.9107 175.949 20.5267 175.949 20.02V18.252H175.285V17.292H175.949V16.244H177.197V17.292H178.269V18.252H177.197V20.004C177.197 20.1853 177.242 20.3267 177.333 20.428C177.429 20.524 177.562 20.572 177.733 20.572C177.93 20.572 178.098 20.5187 178.237 20.412L178.573 21.292ZM184.155 17.132C184.688 17.132 185.117 17.292 185.443 17.612C185.773 17.932 185.939 18.4067 185.939 19.036V21.5H184.691V19.228C184.691 18.8867 184.616 18.6333 184.467 18.468C184.317 18.2973 184.101 18.212 183.819 18.212C183.504 18.212 183.253 18.3107 183.067 18.508C182.88 18.7 182.787 18.988 182.787 19.372V21.5H181.539V17.196H182.731V17.7C182.896 17.5187 183.101 17.38 183.347 17.284C183.592 17.1827 183.861 17.132 184.155 17.132ZM189.165 21.564C188.712 21.564 188.304 21.4707 187.941 21.284C187.584 21.092 187.304 20.828 187.101 20.492C186.898 20.156 186.797 19.7747 186.797 19.348C186.797 18.9213 186.898 18.54 187.101 18.204C187.304 17.868 187.584 17.6067 187.941 17.42C188.304 17.228 188.712 17.132 189.165 17.132C189.618 17.132 190.024 17.228 190.381 17.42C190.738 17.6067 191.018 17.868 191.221 18.204C191.424 18.54 191.525 18.9213 191.525 19.348C191.525 19.7747 191.424 20.156 191.221 20.492C191.018 20.828 190.738 21.092 190.381 21.284C190.024 21.4707 189.618 21.564 189.165 21.564ZM189.165 20.54C189.485 20.54 189.746 20.4333 189.949 20.22C190.157 20.0013 190.261 19.7107 190.261 19.348C190.261 18.9853 190.157 18.6973 189.949 18.484C189.746 18.2653 189.485 18.156 189.165 18.156C188.845 18.156 188.581 18.2653 188.373 18.484C188.165 18.6973 188.061 18.9853 188.061 19.348C188.061 19.7107 188.165 20.0013 188.373 20.22C188.581 20.4333 188.845 20.54 189.165 20.54ZM195.135 21.292C195.012 21.3827 194.86 21.452 194.679 21.5C194.503 21.5427 194.316 21.564 194.119 21.564C193.607 21.564 193.21 21.4333 192.927 21.172C192.65 20.9107 192.511 20.5267 192.511 20.02V18.252H191.847V17.292H192.511V16.244H193.759V17.292H194.831V18.252H193.759V20.004C193.759 20.1853 193.804 20.3267 193.895 20.428C193.991 20.524 194.124 20.572 194.295 20.572C194.492 20.572 194.66 20.5187 194.799 20.412L195.135 21.292ZM199.469 17.292H200.573V18.252H199.501V21.5H198.253V18.252H197.589V17.292H198.253V17.1C198.253 16.6093 198.397 16.22 198.685 15.932C198.979 15.644 199.389 15.5 199.917 15.5C200.104 15.5 200.28 15.5213 200.445 15.564C200.616 15.6013 200.757 15.6573 200.869 15.732L200.541 16.636C200.397 16.5347 200.229 16.484 200.037 16.484C199.659 16.484 199.469 16.692 199.469 17.108V17.292ZM203.188 21.564C202.735 21.564 202.327 21.4707 201.964 21.284C201.607 21.092 201.327 20.828 201.124 20.492C200.922 20.156 200.82 19.7747 200.82 19.348C200.82 18.9213 200.922 18.54 201.124 18.204C201.327 17.868 201.607 17.6067 201.964 17.42C202.327 17.228 202.735 17.132 203.188 17.132C203.642 17.132 204.047 17.228 204.404 17.42C204.762 17.6067 205.042 17.868 205.244 18.204C205.447 18.54 205.548 18.9213 205.548 19.348C205.548 19.7747 205.447 20.156 205.244 20.492C205.042 20.828 204.762 21.092 204.404 21.284C204.047 21.4707 203.642 21.564 203.188 21.564ZM203.188 20.54C203.508 20.54 203.77 20.4333 203.972 20.22C204.18 20.0013 204.284 19.7107 204.284 19.348C204.284 18.9853 204.18 18.6973 203.972 18.484C203.77 18.2653 203.508 18.156 203.188 18.156C202.868 18.156 202.604 18.2653 202.396 18.484C202.188 18.6973 202.084 18.9853 202.084 19.348C202.084 19.7107 202.188 20.0013 202.396 20.22C202.604 20.4333 202.868 20.54 203.188 20.54ZM210.719 17.196V21.5H209.535V20.988C209.369 21.1747 209.172 21.3187 208.943 21.42C208.713 21.516 208.465 21.564 208.199 21.564C207.633 21.564 207.185 21.4013 206.855 21.076C206.524 20.7507 206.359 20.268 206.359 19.628V17.196H207.607V19.444C207.607 20.1373 207.897 20.484 208.479 20.484C208.777 20.484 209.017 20.388 209.199 20.196C209.38 19.9987 209.471 19.708 209.471 19.324V17.196H210.719ZM214.491 17.132C215.024 17.132 215.453 17.292 215.779 17.612C216.109 17.932 216.275 18.4067 216.275 19.036V21.5H215.027V19.228C215.027 18.8867 214.952 18.6333 214.803 18.468C214.653 18.2973 214.437 18.212 214.155 18.212C213.84 18.212 213.589 18.3107 213.403 18.508C213.216 18.7 213.123 18.988 213.123 19.372V21.5H211.875V17.196H213.067V17.7C213.232 17.5187 213.437 17.38 213.683 17.284C213.928 17.1827 214.197 17.132 214.491 17.132ZM221.837 15.564V21.5H220.645V21.004C220.335 21.3773 219.887 21.564 219.301 21.564C218.895 21.564 218.527 21.4733 218.197 21.292C217.871 21.1107 217.615 20.852 217.429 20.516C217.242 20.18 217.149 19.7907 217.149 19.348C217.149 18.9053 217.242 18.516 217.429 18.18C217.615 17.844 217.871 17.5853 218.197 17.404C218.527 17.2227 218.895 17.132 219.301 17.132C219.85 17.132 220.279 17.3053 220.589 17.652V15.564H221.837ZM219.517 20.54C219.831 20.54 220.093 20.4333 220.301 20.22C220.509 20.0013 220.613 19.7107 220.613 19.348C220.613 18.9853 220.509 18.6973 220.301 18.484C220.093 18.2653 219.831 18.156 219.517 18.156C219.197 18.156 218.933 18.2653 218.725 18.484C218.517 18.6973 218.413 18.9853 218.413 19.348C218.413 19.7107 218.517 20.0013 218.725 20.22C218.933 20.4333 219.197 20.54 219.517 20.54Z"
            fill="white"
          />
        </svg>
      );
  }

  return vdom;
}
